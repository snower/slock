// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arbiter.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReplSetMember struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Weight               uint32   `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Arbiter              uint32   `protobuf:"varint,3,opt,name=arbiter,proto3" json:"arbiter,omitempty"`
	Role                 uint32   `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplSetMember) Reset()         { *m = ReplSetMember{} }
func (m *ReplSetMember) String() string { return proto.CompactTextString(m) }
func (*ReplSetMember) ProtoMessage()    {}
func (*ReplSetMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{0}
}
func (m *ReplSetMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplSetMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplSetMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplSetMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplSetMember.Merge(m, src)
}
func (m *ReplSetMember) XXX_Size() int {
	return m.Size()
}
func (m *ReplSetMember) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplSetMember.DiscardUnknown(m)
}

var xxx_messageInfo_ReplSetMember proto.InternalMessageInfo

func (m *ReplSetMember) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ReplSetMember) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ReplSetMember) GetArbiter() uint32 {
	if m != nil {
		return m.Arbiter
	}
	return 0
}

func (m *ReplSetMember) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

type ReplSet struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              uint32           `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Vertime              uint64           `protobuf:"varint,3,opt,name=vertime,proto3" json:"vertime,omitempty"`
	Owner                string           `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Members              []*ReplSetMember `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReplSet) Reset()         { *m = ReplSet{} }
func (m *ReplSet) String() string { return proto.CompactTextString(m) }
func (*ReplSet) ProtoMessage()    {}
func (*ReplSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{1}
}
func (m *ReplSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplSet.Merge(m, src)
}
func (m *ReplSet) XXX_Size() int {
	return m.Size()
}
func (m *ReplSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplSet.DiscardUnknown(m)
}

var xxx_messageInfo_ReplSet proto.InternalMessageInfo

func (m *ReplSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReplSet) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReplSet) GetVertime() uint64 {
	if m != nil {
		return m.Vertime
	}
	return 0
}

func (m *ReplSet) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReplSet) GetMembers() []*ReplSetMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type ArbiterConnectRequest struct {
	FromHost             string   `protobuf:"bytes,1,opt,name=from_host,json=fromHost,proto3" json:"from_host,omitempty"`
	ToHost               string   `protobuf:"bytes,2,opt,name=to_host,json=toHost,proto3" json:"to_host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterConnectRequest) Reset()         { *m = ArbiterConnectRequest{} }
func (m *ArbiterConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ArbiterConnectRequest) ProtoMessage()    {}
func (*ArbiterConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{2}
}
func (m *ArbiterConnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterConnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterConnectRequest.Merge(m, src)
}
func (m *ArbiterConnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterConnectRequest proto.InternalMessageInfo

func (m *ArbiterConnectRequest) GetFromHost() string {
	if m != nil {
		return m.FromHost
	}
	return ""
}

func (m *ArbiterConnectRequest) GetToHost() string {
	if m != nil {
		return m.ToHost
	}
	return ""
}

type ArbiterConnectResponse struct {
	ErrMessage           string   `protobuf:"bytes,1,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterConnectResponse) Reset()         { *m = ArbiterConnectResponse{} }
func (m *ArbiterConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ArbiterConnectResponse) ProtoMessage()    {}
func (*ArbiterConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{3}
}
func (m *ArbiterConnectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterConnectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterConnectResponse.Merge(m, src)
}
func (m *ArbiterConnectResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterConnectResponse proto.InternalMessageInfo

func (m *ArbiterConnectResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

type ArbiterAnnouncementRequest struct {
	FromHost             string   `protobuf:"bytes,1,opt,name=from_host,json=fromHost,proto3" json:"from_host,omitempty"`
	ToHost               string   `protobuf:"bytes,2,opt,name=to_host,json=toHost,proto3" json:"to_host,omitempty"`
	Replset              *ReplSet `protobuf:"bytes,3,opt,name=replset,proto3" json:"replset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterAnnouncementRequest) Reset()         { *m = ArbiterAnnouncementRequest{} }
func (m *ArbiterAnnouncementRequest) String() string { return proto.CompactTextString(m) }
func (*ArbiterAnnouncementRequest) ProtoMessage()    {}
func (*ArbiterAnnouncementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{4}
}
func (m *ArbiterAnnouncementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterAnnouncementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterAnnouncementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterAnnouncementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterAnnouncementRequest.Merge(m, src)
}
func (m *ArbiterAnnouncementRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterAnnouncementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterAnnouncementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterAnnouncementRequest proto.InternalMessageInfo

func (m *ArbiterAnnouncementRequest) GetFromHost() string {
	if m != nil {
		return m.FromHost
	}
	return ""
}

func (m *ArbiterAnnouncementRequest) GetToHost() string {
	if m != nil {
		return m.ToHost
	}
	return ""
}

func (m *ArbiterAnnouncementRequest) GetReplset() *ReplSet {
	if m != nil {
		return m.Replset
	}
	return nil
}

type ArbiterAnnouncementResponse struct {
	ErrMessage           string   `protobuf:"bytes,1,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterAnnouncementResponse) Reset()         { *m = ArbiterAnnouncementResponse{} }
func (m *ArbiterAnnouncementResponse) String() string { return proto.CompactTextString(m) }
func (*ArbiterAnnouncementResponse) ProtoMessage()    {}
func (*ArbiterAnnouncementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{5}
}
func (m *ArbiterAnnouncementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterAnnouncementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterAnnouncementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterAnnouncementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterAnnouncementResponse.Merge(m, src)
}
func (m *ArbiterAnnouncementResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterAnnouncementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterAnnouncementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterAnnouncementResponse proto.InternalMessageInfo

func (m *ArbiterAnnouncementResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

type ArbiterVoteRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterVoteRequest) Reset()         { *m = ArbiterVoteRequest{} }
func (m *ArbiterVoteRequest) String() string { return proto.CompactTextString(m) }
func (*ArbiterVoteRequest) ProtoMessage()    {}
func (*ArbiterVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{6}
}
func (m *ArbiterVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterVoteRequest.Merge(m, src)
}
func (m *ArbiterVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterVoteRequest proto.InternalMessageInfo

type ArbiterVoteResponse struct {
	ErrMessage           string   `protobuf:"bytes,1,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
	VoteHost             string   `protobuf:"bytes,2,opt,name=vote_host,json=voteHost,proto3" json:"vote_host,omitempty"`
	VoteAofId            string   `protobuf:"bytes,3,opt,name=vote_aof_id,json=voteAofId,proto3" json:"vote_aof_id,omitempty"`
	AofId                string   `protobuf:"bytes,4,opt,name=aof_id,json=aofId,proto3" json:"aof_id,omitempty"`
	Role                 uint32   `protobuf:"varint,5,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterVoteResponse) Reset()         { *m = ArbiterVoteResponse{} }
func (m *ArbiterVoteResponse) String() string { return proto.CompactTextString(m) }
func (*ArbiterVoteResponse) ProtoMessage()    {}
func (*ArbiterVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{7}
}
func (m *ArbiterVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterVoteResponse.Merge(m, src)
}
func (m *ArbiterVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterVoteResponse proto.InternalMessageInfo

func (m *ArbiterVoteResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

func (m *ArbiterVoteResponse) GetVoteHost() string {
	if m != nil {
		return m.VoteHost
	}
	return ""
}

func (m *ArbiterVoteResponse) GetVoteAofId() string {
	if m != nil {
		return m.VoteAofId
	}
	return ""
}

func (m *ArbiterVoteResponse) GetAofId() string {
	if m != nil {
		return m.AofId
	}
	return ""
}

func (m *ArbiterVoteResponse) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

type ArbiterProposalRequest struct {
	ProposalId           uint64   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	AofId                string   `protobuf:"bytes,2,opt,name=aof_id,json=aofId,proto3" json:"aof_id,omitempty"`
	Host                 string   `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterProposalRequest) Reset()         { *m = ArbiterProposalRequest{} }
func (m *ArbiterProposalRequest) String() string { return proto.CompactTextString(m) }
func (*ArbiterProposalRequest) ProtoMessage()    {}
func (*ArbiterProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{8}
}
func (m *ArbiterProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterProposalRequest.Merge(m, src)
}
func (m *ArbiterProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterProposalRequest proto.InternalMessageInfo

func (m *ArbiterProposalRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *ArbiterProposalRequest) GetAofId() string {
	if m != nil {
		return m.AofId
	}
	return ""
}

func (m *ArbiterProposalRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ArbiterProposalResponse struct {
	ErrMessage           string   `protobuf:"bytes,1,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterProposalResponse) Reset()         { *m = ArbiterProposalResponse{} }
func (m *ArbiterProposalResponse) String() string { return proto.CompactTextString(m) }
func (*ArbiterProposalResponse) ProtoMessage()    {}
func (*ArbiterProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{9}
}
func (m *ArbiterProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterProposalResponse.Merge(m, src)
}
func (m *ArbiterProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterProposalResponse proto.InternalMessageInfo

func (m *ArbiterProposalResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

type ArbiterCommitRequest struct {
	ProposalId           uint64   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	AofId                string   `protobuf:"bytes,2,opt,name=aof_id,json=aofId,proto3" json:"aof_id,omitempty"`
	Host                 string   `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterCommitRequest) Reset()         { *m = ArbiterCommitRequest{} }
func (m *ArbiterCommitRequest) String() string { return proto.CompactTextString(m) }
func (*ArbiterCommitRequest) ProtoMessage()    {}
func (*ArbiterCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{10}
}
func (m *ArbiterCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterCommitRequest.Merge(m, src)
}
func (m *ArbiterCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterCommitRequest proto.InternalMessageInfo

func (m *ArbiterCommitRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *ArbiterCommitRequest) GetAofId() string {
	if m != nil {
		return m.AofId
	}
	return ""
}

func (m *ArbiterCommitRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ArbiterCommitResponse struct {
	ErrMessage           string   `protobuf:"bytes,1,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterCommitResponse) Reset()         { *m = ArbiterCommitResponse{} }
func (m *ArbiterCommitResponse) String() string { return proto.CompactTextString(m) }
func (*ArbiterCommitResponse) ProtoMessage()    {}
func (*ArbiterCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{11}
}
func (m *ArbiterCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterCommitResponse.Merge(m, src)
}
func (m *ArbiterCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterCommitResponse proto.InternalMessageInfo

func (m *ArbiterCommitResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

type ArbiterStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterStatusRequest) Reset()         { *m = ArbiterStatusRequest{} }
func (m *ArbiterStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ArbiterStatusRequest) ProtoMessage()    {}
func (*ArbiterStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{12}
}
func (m *ArbiterStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterStatusRequest.Merge(m, src)
}
func (m *ArbiterStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterStatusRequest proto.InternalMessageInfo

type ArbiterStatusResponse struct {
	ErrMessage           string   `protobuf:"bytes,1,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty"`
	AofId                string   `protobuf:"bytes,2,opt,name=aof_id,json=aofId,proto3" json:"aof_id,omitempty"`
	Role                 uint32   `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbiterStatusResponse) Reset()         { *m = ArbiterStatusResponse{} }
func (m *ArbiterStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ArbiterStatusResponse) ProtoMessage()    {}
func (*ArbiterStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe7ab01ec67a824, []int{13}
}
func (m *ArbiterStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbiterStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbiterStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbiterStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbiterStatusResponse.Merge(m, src)
}
func (m *ArbiterStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbiterStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbiterStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbiterStatusResponse proto.InternalMessageInfo

func (m *ArbiterStatusResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

func (m *ArbiterStatusResponse) GetAofId() string {
	if m != nil {
		return m.AofId
	}
	return ""
}

func (m *ArbiterStatusResponse) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func init() {
	proto.RegisterType((*ReplSetMember)(nil), "protobuf.ReplSetMember")
	proto.RegisterType((*ReplSet)(nil), "protobuf.ReplSet")
	proto.RegisterType((*ArbiterConnectRequest)(nil), "protobuf.ArbiterConnectRequest")
	proto.RegisterType((*ArbiterConnectResponse)(nil), "protobuf.ArbiterConnectResponse")
	proto.RegisterType((*ArbiterAnnouncementRequest)(nil), "protobuf.ArbiterAnnouncementRequest")
	proto.RegisterType((*ArbiterAnnouncementResponse)(nil), "protobuf.ArbiterAnnouncementResponse")
	proto.RegisterType((*ArbiterVoteRequest)(nil), "protobuf.ArbiterVoteRequest")
	proto.RegisterType((*ArbiterVoteResponse)(nil), "protobuf.ArbiterVoteResponse")
	proto.RegisterType((*ArbiterProposalRequest)(nil), "protobuf.ArbiterProposalRequest")
	proto.RegisterType((*ArbiterProposalResponse)(nil), "protobuf.ArbiterProposalResponse")
	proto.RegisterType((*ArbiterCommitRequest)(nil), "protobuf.ArbiterCommitRequest")
	proto.RegisterType((*ArbiterCommitResponse)(nil), "protobuf.ArbiterCommitResponse")
	proto.RegisterType((*ArbiterStatusRequest)(nil), "protobuf.ArbiterStatusRequest")
	proto.RegisterType((*ArbiterStatusResponse)(nil), "protobuf.ArbiterStatusResponse")
}

func init() { proto.RegisterFile("arbiter.proto", fileDescriptor_8fe7ab01ec67a824) }

var fileDescriptor_8fe7ab01ec67a824 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0x76, 0xf2, 0x37, 0x49, 0x0d, 0x01, 0x6d, 0xb3, 0xc9, 0xe0, 0xc2, 0x6c, 0x98, 0x53, 0x40,
	0x08, 0xb8, 0x5e, 0xd4, 0x83, 0x10, 0xbd, 0xe8, 0x21, 0x20, 0xb3, 0xe0, 0x35, 0xcc, 0x24, 0x95,
	0xdd, 0x81, 0x4c, 0xf7, 0xd8, 0xdd, 0xd9, 0x3d, 0xfa, 0x1a, 0xe2, 0xc1, 0xe7, 0xf1, 0xe8, 0x23,
	0x48, 0x7c, 0x11, 0xe9, 0x9a, 0xee, 0x6c, 0xb2, 0xab, 0x30, 0x20, 0x9e, 0xa6, 0xeb, 0xab, 0x9e,
	0xfa, 0xbe, 0xaf, 0xaa, 0x1a, 0xfa, 0xa9, 0xcc, 0x72, 0x8d, 0x72, 0x5a, 0x4a, 0xa1, 0x05, 0xeb,
	0xd2, 0x27, 0xdb, 0xae, 0xe3, 0x1c, 0xfa, 0x09, 0x96, 0x9b, 0x0b, 0xd4, 0x73, 0x2c, 0x32, 0x94,
	0x8c, 0x41, 0xeb, 0x4a, 0x28, 0x1d, 0x7a, 0x63, 0x6f, 0xd2, 0x4b, 0xe8, 0xcc, 0x86, 0xd0, 0xb9,
	0xc1, 0xfc, 0xf2, 0x4a, 0x87, 0x8d, 0xb1, 0x37, 0xe9, 0x27, 0x36, 0x62, 0x21, 0xf8, 0xb6, 0x6e,
	0xd8, 0xa4, 0x84, 0x0b, 0x4d, 0x15, 0x29, 0x36, 0x18, 0xb6, 0x08, 0xa6, 0x73, 0xfc, 0xd5, 0x03,
	0xdf, 0x72, 0x99, 0x3c, 0x4f, 0x0b, 0x74, 0x2c, 0xe6, 0x6c, 0xaa, 0x5d, 0xa3, 0x54, 0xb9, 0xe0,
	0x96, 0xc6, 0x85, 0x36, 0xa3, 0xf3, 0x02, 0x89, 0xa7, 0x95, 0xb8, 0x90, 0x0d, 0xa0, 0x2d, 0x6e,
	0x38, 0x4a, 0x22, 0xea, 0x25, 0x55, 0xc0, 0x9e, 0x81, 0x5f, 0x90, 0x1b, 0x15, 0xb6, 0xc7, 0xcd,
	0x49, 0x70, 0x3e, 0x9a, 0x3a, 0xc3, 0xd3, 0x23, 0xb7, 0x89, 0xbb, 0x17, 0xcf, 0xe1, 0x64, 0x56,
	0x69, 0x7f, 0x2b, 0x38, 0xc7, 0xa5, 0x4e, 0xf0, 0xd3, 0x16, 0x95, 0x66, 0xa7, 0xd0, 0x5b, 0x4b,
	0x51, 0x2c, 0x0e, 0x9a, 0xd2, 0x35, 0xc0, 0x3b, 0xd3, 0x98, 0x11, 0xf8, 0x5a, 0x54, 0xa9, 0x06,
	0xa5, 0x3a, 0x5a, 0x98, 0x44, 0xfc, 0x12, 0x86, 0x77, 0xcb, 0xa9, 0x52, 0x70, 0x85, 0xec, 0x0c,
	0x02, 0x94, 0x72, 0x51, 0xa0, 0x52, 0xe9, 0xa5, 0x6b, 0x00, 0xa0, 0x94, 0xf3, 0x0a, 0x89, 0x3f,
	0xc3, 0x13, 0xfb, 0xeb, 0x8c, 0x73, 0xb1, 0xe5, 0x4b, 0x2c, 0x90, 0xff, 0x9b, 0x1c, 0xf6, 0x14,
	0x7c, 0x89, 0xe5, 0x46, 0xa1, 0xa6, 0x06, 0x06, 0xe7, 0x8f, 0xee, 0x35, 0x24, 0x71, 0x37, 0xe2,
	0xd7, 0x70, 0xfa, 0x47, 0x01, 0x75, 0x0d, 0x0c, 0x80, 0xd9, 0xff, 0x3f, 0x0a, 0x8d, 0x56, 0x78,
	0xfc, 0xcd, 0x83, 0xc7, 0x47, 0x70, 0xcd, 0x72, 0xc6, 0xf1, 0xb5, 0xd0, 0x78, 0x68, 0xab, 0x6b,
	0x00, 0x32, 0x16, 0x41, 0x40, 0xc9, 0x54, 0xac, 0x17, 0xf9, 0x8a, 0xcc, 0xf5, 0x12, 0xba, 0x3f,
	0x13, 0xeb, 0xf7, 0x2b, 0x76, 0x02, 0x1d, 0x9b, 0xb2, 0x0b, 0x92, 0x12, 0xec, 0xd6, 0xb3, 0x7d,
	0xb0, 0x9e, 0xab, 0xfd, 0xc8, 0x3e, 0x48, 0x51, 0x0a, 0x95, 0x6e, 0x5c, 0xcf, 0xcf, 0x20, 0x28,
	0x2d, 0x64, 0x2a, 0x79, 0xb4, 0x82, 0xe0, 0xa0, 0x23, 0x96, 0xc6, 0x1d, 0x16, 0x12, 0xdd, 0xbc,
	0x7d, 0x4a, 0xf1, 0x2b, 0x18, 0xdd, 0x63, 0xa9, 0xdb, 0xd8, 0x0c, 0x06, 0xfb, 0xa5, 0x2a, 0x8a,
	0x5c, 0xff, 0x0f, 0x7d, 0x2f, 0x0e, 0xde, 0x41, 0xc5, 0x51, 0x57, 0xdd, 0x70, 0xaf, 0xee, 0x42,
	0xa7, 0x7a, 0xab, 0xdc, 0xe0, 0x97, 0xfb, 0x8a, 0x0e, 0xaf, 0x3b, 0xf9, 0xbf, 0xcb, 0xa6, 0xe1,
	0x35, 0x6f, 0x87, 0xf7, 0xe6, 0xe1, 0xf7, 0x5d, 0xe4, 0xfd, 0xd8, 0x45, 0xde, 0xcf, 0x5d, 0xe4,
	0x7d, 0xf9, 0x15, 0x3d, 0xc8, 0x3a, 0xb4, 0xe0, 0xcf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x64,
	0xb1, 0xc1, 0xd8, 0xfa, 0x04, 0x00, 0x00,
}

func (m *ReplSetMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplSetMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplSetMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x20
	}
	if m.Arbiter != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.Arbiter))
		i--
		dAtA[i] = 0x18
	}
	if m.Weight != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArbiter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.Vertime != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.Vertime))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterConnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterConnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterConnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToHost) > 0 {
		i -= len(m.ToHost)
		copy(dAtA[i:], m.ToHost)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ToHost)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromHost) > 0 {
		i -= len(m.FromHost)
		copy(dAtA[i:], m.FromHost)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.FromHost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterConnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterConnectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterConnectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrMessage) > 0 {
		i -= len(m.ErrMessage)
		copy(dAtA[i:], m.ErrMessage)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ErrMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterAnnouncementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterAnnouncementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterAnnouncementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Replset != nil {
		{
			size, err := m.Replset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArbiter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToHost) > 0 {
		i -= len(m.ToHost)
		copy(dAtA[i:], m.ToHost)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ToHost)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromHost) > 0 {
		i -= len(m.FromHost)
		copy(dAtA[i:], m.FromHost)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.FromHost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterAnnouncementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterAnnouncementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterAnnouncementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrMessage) > 0 {
		i -= len(m.ErrMessage)
		copy(dAtA[i:], m.ErrMessage)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ErrMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AofId) > 0 {
		i -= len(m.AofId)
		copy(dAtA[i:], m.AofId)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.AofId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VoteAofId) > 0 {
		i -= len(m.VoteAofId)
		copy(dAtA[i:], m.VoteAofId)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.VoteAofId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoteHost) > 0 {
		i -= len(m.VoteHost)
		copy(dAtA[i:], m.VoteHost)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.VoteHost)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ErrMessage) > 0 {
		i -= len(m.ErrMessage)
		copy(dAtA[i:], m.ErrMessage)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ErrMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AofId) > 0 {
		i -= len(m.AofId)
		copy(dAtA[i:], m.AofId)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.AofId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrMessage) > 0 {
		i -= len(m.ErrMessage)
		copy(dAtA[i:], m.ErrMessage)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ErrMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AofId) > 0 {
		i -= len(m.AofId)
		copy(dAtA[i:], m.AofId)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.AofId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrMessage) > 0 {
		i -= len(m.ErrMessage)
		copy(dAtA[i:], m.ErrMessage)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ErrMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ArbiterStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbiterStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbiterStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != 0 {
		i = encodeVarintArbiter(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AofId) > 0 {
		i -= len(m.AofId)
		copy(dAtA[i:], m.AofId)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.AofId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ErrMessage) > 0 {
		i -= len(m.ErrMessage)
		copy(dAtA[i:], m.ErrMessage)
		i = encodeVarintArbiter(dAtA, i, uint64(len(m.ErrMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintArbiter(dAtA []byte, offset int, v uint64) int {
	offset -= sovArbiter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReplSetMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovArbiter(uint64(m.Weight))
	}
	if m.Arbiter != 0 {
		n += 1 + sovArbiter(uint64(m.Arbiter))
	}
	if m.Role != 0 {
		n += 1 + sovArbiter(uint64(m.Role))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovArbiter(uint64(m.Version))
	}
	if m.Vertime != 0 {
		n += 1 + sovArbiter(uint64(m.Vertime))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovArbiter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterConnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromHost)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.ToHost)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterConnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMessage)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterAnnouncementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromHost)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.ToHost)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.Replset != nil {
		l = m.Replset.Size()
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterAnnouncementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMessage)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMessage)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.VoteHost)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.VoteAofId)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.AofId)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovArbiter(uint64(m.Role))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovArbiter(uint64(m.ProposalId))
	}
	l = len(m.AofId)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMessage)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovArbiter(uint64(m.ProposalId))
	}
	l = len(m.AofId)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMessage)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArbiterStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMessage)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	l = len(m.AofId)
	if l > 0 {
		n += 1 + l + sovArbiter(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovArbiter(uint64(m.Role))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovArbiter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArbiter(x uint64) (n int) {
	return sovArbiter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplSetMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplSetMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplSetMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arbiter", wireType)
			}
			m.Arbiter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arbiter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertime", wireType)
			}
			m.Vertime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vertime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &ReplSetMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterConnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterConnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterConnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterConnectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterConnectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterConnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterAnnouncementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterAnnouncementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterAnnouncementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replset == nil {
				m.Replset = &ReplSet{}
			}
			if err := m.Replset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterAnnouncementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterAnnouncementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterAnnouncementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteAofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbiterStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbiterStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbiterStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArbiter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArbiter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArbiter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArbiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArbiter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArbiter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArbiter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArbiter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArbiter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArbiter = fmt.Errorf("proto: unexpected end of group")
)
