// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: db.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LockDBLock struct {
	LockKey              []byte   `protobuf:"bytes,1,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	LockedCount          uint32   `protobuf:"varint,2,opt,name=locked_count,json=lockedCount,proto3" json:"locked_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockDBLock) Reset()         { *m = LockDBLock{} }
func (m *LockDBLock) String() string { return proto.CompactTextString(m) }
func (*LockDBLock) ProtoMessage()    {}
func (*LockDBLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{0}
}
func (m *LockDBLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBLock.Merge(m, src)
}
func (m *LockDBLock) XXX_Size() int {
	return m.Size()
}
func (m *LockDBLock) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBLock.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBLock proto.InternalMessageInfo

func (m *LockDBLock) GetLockKey() []byte {
	if m != nil {
		return m.LockKey
	}
	return nil
}

func (m *LockDBLock) GetLockedCount() uint32 {
	if m != nil {
		return m.LockedCount
	}
	return 0
}

type LockDBLockCommand struct {
	RequestId            []byte   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Flag                 uint32   `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
	LockId               []byte   `protobuf:"bytes,3,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	LockKey              []byte   `protobuf:"bytes,4,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	TimeoutFlag          uint32   `protobuf:"varint,5,opt,name=timeout_flag,json=timeoutFlag,proto3" json:"timeout_flag,omitempty"`
	Timeout              uint32   `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ExpriedFlag          uint32   `protobuf:"varint,7,opt,name=expried_flag,json=expriedFlag,proto3" json:"expried_flag,omitempty"`
	Expried              uint32   `protobuf:"varint,8,opt,name=expried,proto3" json:"expried,omitempty"`
	Count                uint32   `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	Rcount               uint32   `protobuf:"varint,10,opt,name=rcount,proto3" json:"rcount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockDBLockCommand) Reset()         { *m = LockDBLockCommand{} }
func (m *LockDBLockCommand) String() string { return proto.CompactTextString(m) }
func (*LockDBLockCommand) ProtoMessage()    {}
func (*LockDBLockCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{1}
}
func (m *LockDBLockCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBLockCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBLockCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBLockCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBLockCommand.Merge(m, src)
}
func (m *LockDBLockCommand) XXX_Size() int {
	return m.Size()
}
func (m *LockDBLockCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBLockCommand.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBLockCommand proto.InternalMessageInfo

func (m *LockDBLockCommand) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *LockDBLockCommand) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *LockDBLockCommand) GetLockId() []byte {
	if m != nil {
		return m.LockId
	}
	return nil
}

func (m *LockDBLockCommand) GetLockKey() []byte {
	if m != nil {
		return m.LockKey
	}
	return nil
}

func (m *LockDBLockCommand) GetTimeoutFlag() uint32 {
	if m != nil {
		return m.TimeoutFlag
	}
	return 0
}

func (m *LockDBLockCommand) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *LockDBLockCommand) GetExpriedFlag() uint32 {
	if m != nil {
		return m.ExpriedFlag
	}
	return 0
}

func (m *LockDBLockCommand) GetExpried() uint32 {
	if m != nil {
		return m.Expried
	}
	return 0
}

func (m *LockDBLockCommand) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LockDBLockCommand) GetRcount() uint32 {
	if m != nil {
		return m.Rcount
	}
	return 0
}

type LockDBLockLocked struct {
	LockId               []byte             `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	StartTime            uint64             `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	TimeoutTime          uint64             `protobuf:"varint,3,opt,name=timeout_time,json=timeoutTime,proto3" json:"timeout_time,omitempty"`
	ExpriedTime          uint64             `protobuf:"varint,4,opt,name=expried_time,json=expriedTime,proto3" json:"expried_time,omitempty"`
	LockedCount          uint32             `protobuf:"varint,5,opt,name=locked_count,json=lockedCount,proto3" json:"locked_count,omitempty"`
	AofTime              uint32             `protobuf:"varint,6,opt,name=aof_time,json=aofTime,proto3" json:"aof_time,omitempty"`
	IsTimeouted          bool               `protobuf:"varint,7,opt,name=is_timeouted,json=isTimeouted,proto3" json:"is_timeouted,omitempty"`
	IsExpried            bool               `protobuf:"varint,8,opt,name=is_expried,json=isExpried,proto3" json:"is_expried,omitempty"`
	IsAof                bool               `protobuf:"varint,9,opt,name=is_aof,json=isAof,proto3" json:"is_aof,omitempty"`
	IsLongTime           bool               `protobuf:"varint,10,opt,name=is_long_time,json=isLongTime,proto3" json:"is_long_time,omitempty"`
	Command              *LockDBLockCommand `protobuf:"bytes,11,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LockDBLockLocked) Reset()         { *m = LockDBLockLocked{} }
func (m *LockDBLockLocked) String() string { return proto.CompactTextString(m) }
func (*LockDBLockLocked) ProtoMessage()    {}
func (*LockDBLockLocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{2}
}
func (m *LockDBLockLocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBLockLocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBLockLocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBLockLocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBLockLocked.Merge(m, src)
}
func (m *LockDBLockLocked) XXX_Size() int {
	return m.Size()
}
func (m *LockDBLockLocked) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBLockLocked.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBLockLocked proto.InternalMessageInfo

func (m *LockDBLockLocked) GetLockId() []byte {
	if m != nil {
		return m.LockId
	}
	return nil
}

func (m *LockDBLockLocked) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *LockDBLockLocked) GetTimeoutTime() uint64 {
	if m != nil {
		return m.TimeoutTime
	}
	return 0
}

func (m *LockDBLockLocked) GetExpriedTime() uint64 {
	if m != nil {
		return m.ExpriedTime
	}
	return 0
}

func (m *LockDBLockLocked) GetLockedCount() uint32 {
	if m != nil {
		return m.LockedCount
	}
	return 0
}

func (m *LockDBLockLocked) GetAofTime() uint32 {
	if m != nil {
		return m.AofTime
	}
	return 0
}

func (m *LockDBLockLocked) GetIsTimeouted() bool {
	if m != nil {
		return m.IsTimeouted
	}
	return false
}

func (m *LockDBLockLocked) GetIsExpried() bool {
	if m != nil {
		return m.IsExpried
	}
	return false
}

func (m *LockDBLockLocked) GetIsAof() bool {
	if m != nil {
		return m.IsAof
	}
	return false
}

func (m *LockDBLockLocked) GetIsLongTime() bool {
	if m != nil {
		return m.IsLongTime
	}
	return false
}

func (m *LockDBLockLocked) GetCommand() *LockDBLockCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

type LockDBLockWait struct {
	LockId               []byte             `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	StartTime            uint64             `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	TimeoutTime          uint64             `protobuf:"varint,3,opt,name=timeout_time,json=timeoutTime,proto3" json:"timeout_time,omitempty"`
	IsLongTime           bool               `protobuf:"varint,4,opt,name=is_long_time,json=isLongTime,proto3" json:"is_long_time,omitempty"`
	Command              *LockDBLockCommand `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LockDBLockWait) Reset()         { *m = LockDBLockWait{} }
func (m *LockDBLockWait) String() string { return proto.CompactTextString(m) }
func (*LockDBLockWait) ProtoMessage()    {}
func (*LockDBLockWait) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{3}
}
func (m *LockDBLockWait) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBLockWait) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBLockWait.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBLockWait) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBLockWait.Merge(m, src)
}
func (m *LockDBLockWait) XXX_Size() int {
	return m.Size()
}
func (m *LockDBLockWait) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBLockWait.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBLockWait proto.InternalMessageInfo

func (m *LockDBLockWait) GetLockId() []byte {
	if m != nil {
		return m.LockId
	}
	return nil
}

func (m *LockDBLockWait) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *LockDBLockWait) GetTimeoutTime() uint64 {
	if m != nil {
		return m.TimeoutTime
	}
	return 0
}

func (m *LockDBLockWait) GetIsLongTime() bool {
	if m != nil {
		return m.IsLongTime
	}
	return false
}

func (m *LockDBLockWait) GetCommand() *LockDBLockCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

type LockDBListLockRequest struct {
	DbId                 uint32   `protobuf:"varint,1,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockDBListLockRequest) Reset()         { *m = LockDBListLockRequest{} }
func (m *LockDBListLockRequest) String() string { return proto.CompactTextString(m) }
func (*LockDBListLockRequest) ProtoMessage()    {}
func (*LockDBListLockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{4}
}
func (m *LockDBListLockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBListLockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBListLockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBListLockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBListLockRequest.Merge(m, src)
}
func (m *LockDBListLockRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockDBListLockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBListLockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBListLockRequest proto.InternalMessageInfo

func (m *LockDBListLockRequest) GetDbId() uint32 {
	if m != nil {
		return m.DbId
	}
	return 0
}

type LockDBListLockResponse struct {
	Locks                []*LockDBLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LockDBListLockResponse) Reset()         { *m = LockDBListLockResponse{} }
func (m *LockDBListLockResponse) String() string { return proto.CompactTextString(m) }
func (*LockDBListLockResponse) ProtoMessage()    {}
func (*LockDBListLockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{5}
}
func (m *LockDBListLockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBListLockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBListLockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBListLockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBListLockResponse.Merge(m, src)
}
func (m *LockDBListLockResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockDBListLockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBListLockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBListLockResponse proto.InternalMessageInfo

func (m *LockDBListLockResponse) GetLocks() []*LockDBLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type LockDBListLockedRequest struct {
	DbId                 uint32   `protobuf:"varint,1,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	LockKey              []byte   `protobuf:"bytes,2,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockDBListLockedRequest) Reset()         { *m = LockDBListLockedRequest{} }
func (m *LockDBListLockedRequest) String() string { return proto.CompactTextString(m) }
func (*LockDBListLockedRequest) ProtoMessage()    {}
func (*LockDBListLockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{6}
}
func (m *LockDBListLockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBListLockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBListLockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBListLockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBListLockedRequest.Merge(m, src)
}
func (m *LockDBListLockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockDBListLockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBListLockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBListLockedRequest proto.InternalMessageInfo

func (m *LockDBListLockedRequest) GetDbId() uint32 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *LockDBListLockedRequest) GetLockKey() []byte {
	if m != nil {
		return m.LockKey
	}
	return nil
}

type LockDBListLockedResponse struct {
	LockKey              []byte              `protobuf:"bytes,1,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	LockedCount          uint32              `protobuf:"varint,2,opt,name=locked_count,json=lockedCount,proto3" json:"locked_count,omitempty"`
	Locks                []*LockDBLockLocked `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LockDBListLockedResponse) Reset()         { *m = LockDBListLockedResponse{} }
func (m *LockDBListLockedResponse) String() string { return proto.CompactTextString(m) }
func (*LockDBListLockedResponse) ProtoMessage()    {}
func (*LockDBListLockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{7}
}
func (m *LockDBListLockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBListLockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBListLockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBListLockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBListLockedResponse.Merge(m, src)
}
func (m *LockDBListLockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockDBListLockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBListLockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBListLockedResponse proto.InternalMessageInfo

func (m *LockDBListLockedResponse) GetLockKey() []byte {
	if m != nil {
		return m.LockKey
	}
	return nil
}

func (m *LockDBListLockedResponse) GetLockedCount() uint32 {
	if m != nil {
		return m.LockedCount
	}
	return 0
}

func (m *LockDBListLockedResponse) GetLocks() []*LockDBLockLocked {
	if m != nil {
		return m.Locks
	}
	return nil
}

type LockDBListWaitRequest struct {
	DbId                 uint32   `protobuf:"varint,1,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	LockKey              []byte   `protobuf:"bytes,2,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockDBListWaitRequest) Reset()         { *m = LockDBListWaitRequest{} }
func (m *LockDBListWaitRequest) String() string { return proto.CompactTextString(m) }
func (*LockDBListWaitRequest) ProtoMessage()    {}
func (*LockDBListWaitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{8}
}
func (m *LockDBListWaitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBListWaitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBListWaitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBListWaitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBListWaitRequest.Merge(m, src)
}
func (m *LockDBListWaitRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockDBListWaitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBListWaitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBListWaitRequest proto.InternalMessageInfo

func (m *LockDBListWaitRequest) GetDbId() uint32 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *LockDBListWaitRequest) GetLockKey() []byte {
	if m != nil {
		return m.LockKey
	}
	return nil
}

type LockDBListWaitResponse struct {
	LockKey              []byte            `protobuf:"bytes,1,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	LockedCount          uint32            `protobuf:"varint,2,opt,name=locked_count,json=lockedCount,proto3" json:"locked_count,omitempty"`
	Locks                []*LockDBLockWait `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LockDBListWaitResponse) Reset()         { *m = LockDBListWaitResponse{} }
func (m *LockDBListWaitResponse) String() string { return proto.CompactTextString(m) }
func (*LockDBListWaitResponse) ProtoMessage()    {}
func (*LockDBListWaitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{9}
}
func (m *LockDBListWaitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockDBListWaitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockDBListWaitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockDBListWaitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockDBListWaitResponse.Merge(m, src)
}
func (m *LockDBListWaitResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockDBListWaitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockDBListWaitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockDBListWaitResponse proto.InternalMessageInfo

func (m *LockDBListWaitResponse) GetLockKey() []byte {
	if m != nil {
		return m.LockKey
	}
	return nil
}

func (m *LockDBListWaitResponse) GetLockedCount() uint32 {
	if m != nil {
		return m.LockedCount
	}
	return 0
}

func (m *LockDBListWaitResponse) GetLocks() []*LockDBLockWait {
	if m != nil {
		return m.Locks
	}
	return nil
}

func init() {
	proto.RegisterType((*LockDBLock)(nil), "protobuf.LockDBLock")
	proto.RegisterType((*LockDBLockCommand)(nil), "protobuf.LockDBLockCommand")
	proto.RegisterType((*LockDBLockLocked)(nil), "protobuf.LockDBLockLocked")
	proto.RegisterType((*LockDBLockWait)(nil), "protobuf.LockDBLockWait")
	proto.RegisterType((*LockDBListLockRequest)(nil), "protobuf.LockDBListLockRequest")
	proto.RegisterType((*LockDBListLockResponse)(nil), "protobuf.LockDBListLockResponse")
	proto.RegisterType((*LockDBListLockedRequest)(nil), "protobuf.LockDBListLockedRequest")
	proto.RegisterType((*LockDBListLockedResponse)(nil), "protobuf.LockDBListLockedResponse")
	proto.RegisterType((*LockDBListWaitRequest)(nil), "protobuf.LockDBListWaitRequest")
	proto.RegisterType((*LockDBListWaitResponse)(nil), "protobuf.LockDBListWaitResponse")
}

func init() { proto.RegisterFile("db.proto", fileDescriptor_8817812184a13374) }

var fileDescriptor_8817812184a13374 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcb, 0x6e, 0x13, 0x31,
	0x14, 0xc5, 0xcd, 0x4c, 0x32, 0xb9, 0x69, 0x51, 0x31, 0x7d, 0x0c, 0xa0, 0x46, 0x61, 0x56, 0x11,
	0x42, 0x11, 0x2a, 0xe2, 0x03, 0x68, 0x0b, 0x28, 0x90, 0x95, 0x55, 0x89, 0xe5, 0x68, 0x12, 0x7b,
	0x22, 0x2b, 0x0f, 0x87, 0x78, 0x22, 0xd1, 0x1d, 0x2b, 0x16, 0x7c, 0x01, 0x6b, 0xbe, 0x85, 0x05,
	0x4b, 0x3e, 0x01, 0x85, 0x1f, 0x41, 0xbe, 0xb6, 0x95, 0x4c, 0x13, 0x55, 0xe2, 0xb5, 0x49, 0x7c,
	0x8f, 0xcf, 0x7d, 0x9c, 0x63, 0x7b, 0x20, 0xe2, 0xfd, 0xce, 0x6c, 0xae, 0x0a, 0x45, 0x23, 0xfc,
	0xeb, 0x2f, 0xf2, 0xe4, 0x35, 0x40, 0x4f, 0x0d, 0x46, 0x17, 0x67, 0xe6, 0x97, 0xde, 0x83, 0x68,
	0xac, 0x06, 0xa3, 0x74, 0x24, 0xae, 0x62, 0xd2, 0x22, 0xed, 0x5d, 0x56, 0x33, 0xf1, 0x1b, 0x71,
	0x45, 0x1f, 0xc2, 0xae, 0x59, 0x0a, 0x9e, 0x0e, 0xd4, 0x62, 0x5a, 0xc4, 0x3b, 0x2d, 0xd2, 0xde,
	0x63, 0x0d, 0x8b, 0x9d, 0x1b, 0x28, 0xf9, 0xb2, 0x03, 0x77, 0x56, 0xc5, 0xce, 0xd5, 0x64, 0x92,
	0x4d, 0x39, 0x3d, 0x01, 0x98, 0x8b, 0x77, 0x0b, 0xa1, 0x8b, 0x54, 0x72, 0x57, 0xb5, 0xee, 0x90,
	0x2e, 0xa7, 0x14, 0x82, 0x7c, 0x9c, 0x0d, 0x5d, 0x3d, 0x5c, 0xd3, 0x63, 0xc0, 0xb6, 0x86, 0x5f,
	0x41, 0x7e, 0xd5, 0x84, 0x5d, 0x5e, 0x9a, 0x2f, 0xd8, 0x98, 0xaf, 0x90, 0x13, 0xa1, 0x16, 0x45,
	0x8a, 0xf5, 0x42, 0x3b, 0x9f, 0xc3, 0x5e, 0x9a, 0xb2, 0x31, 0xd4, 0x5c, 0x18, 0x57, 0x71, 0xd7,
	0x87, 0x26, 0x59, 0xbc, 0x9f, 0xcd, 0xa5, 0xe0, 0x36, 0xb9, 0x66, 0x93, 0x1d, 0xe6, 0x93, 0x5d,
	0x18, 0x47, 0x36, 0xd9, 0x85, 0xf4, 0x00, 0x42, 0x6b, 0x49, 0x1d, 0x71, 0x1b, 0xd0, 0x23, 0xa8,
	0xce, 0x2d, 0x0c, 0x08, 0xbb, 0x28, 0xf9, 0x50, 0x81, 0xfd, 0x95, 0x49, 0x3d, 0xb4, 0x6f, 0x5d,
	0x30, 0x29, 0x09, 0x3e, 0x01, 0xd0, 0x45, 0x36, 0x2f, 0x52, 0x33, 0x29, 0x7a, 0x14, 0xb0, 0x3a,
	0x22, 0x97, 0x72, 0x22, 0xd6, 0x45, 0x23, 0xa1, 0x82, 0x04, 0x2f, 0xda, 0x53, 0xbc, 0x34, 0xa4,
	0x04, 0x96, 0xe2, 0x30, 0x4f, 0x29, 0x1d, 0x6d, 0xb8, 0x71, 0xb4, 0xc6, 0xf8, 0x4c, 0xe5, 0xb6,
	0x82, 0xf3, 0x2e, 0x53, 0xb9, 0xcf, 0x96, 0x3a, 0x75, 0x2d, 0x05, 0x47, 0xef, 0x22, 0xd6, 0x90,
	0xfa, 0xd2, 0x43, 0x46, 0x85, 0xd4, 0xe9, 0xba, 0x7d, 0x11, 0xab, 0x4b, 0xfd, 0xc2, 0x19, 0x78,
	0x08, 0x55, 0xa9, 0xd3, 0x4c, 0xe5, 0xe8, 0x60, 0xc4, 0x42, 0xa9, 0x9f, 0xab, 0x9c, 0xb6, 0xb0,
	0xf0, 0x58, 0x4d, 0x87, 0xb6, 0x2f, 0xe0, 0x26, 0x48, 0xdd, 0x53, 0xd3, 0x21, 0xb6, 0x7e, 0x06,
	0xb5, 0x81, 0xbd, 0x65, 0x71, 0xa3, 0x45, 0xda, 0x8d, 0xd3, 0x07, 0x1d, 0x7f, 0xb1, 0x3b, 0x1b,
	0x17, 0x91, 0x79, 0x6e, 0xf2, 0x95, 0xc0, 0xed, 0xd5, 0xf6, 0xdb, 0x4c, 0x16, 0xff, 0xf3, 0x00,
	0xae, 0xcb, 0x08, 0x6e, 0x92, 0x11, 0xfe, 0x86, 0x8c, 0xc7, 0x70, 0xe8, 0x76, 0xa5, 0x2e, 0xcc,
	0x8a, 0xd9, 0x47, 0x45, 0xef, 0x42, 0xc8, 0xfb, 0x5e, 0xca, 0x1e, 0x0b, 0x78, 0xbf, 0xcb, 0x93,
	0x0b, 0x38, 0xba, 0xce, 0xd6, 0x33, 0x35, 0xd5, 0x82, 0x3e, 0x82, 0xd0, 0x88, 0xd5, 0x31, 0x69,
	0x55, 0xda, 0x8d, 0xd3, 0x83, 0x6d, 0xcd, 0x99, 0xa5, 0x24, 0x5d, 0x38, 0x2e, 0x57, 0x11, 0xfc,
	0xa6, 0xae, 0xa5, 0x07, 0xbb, 0x53, 0x7a, 0xb0, 0xc9, 0x27, 0x02, 0xf1, 0x66, 0x2d, 0x37, 0xd3,
	0x5f, 0x7d, 0x88, 0xe8, 0x13, 0xaf, 0xa8, 0x82, 0x8a, 0xee, 0x6f, 0x53, 0xe4, 0x1a, 0x3a, 0x5d,
	0xaf, 0xd6, 0xbd, 0x34, 0x37, 0xe2, 0x4f, 0x55, 0x7d, 0x24, 0xeb, 0x3e, 0xdb, 0x4a, 0xff, 0x44,
	0x53, 0xa7, 0xac, 0x29, 0xde, 0xa6, 0x09, 0xdb, 0x59, 0xda, 0xd9, 0xfe, 0xb7, 0x65, 0x93, 0x7c,
	0x5f, 0x36, 0xc9, 0x8f, 0x65, 0x93, 0x7c, 0xfe, 0xd9, 0xbc, 0xd5, 0xaf, 0x62, 0xc6, 0xd3, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x44, 0x22, 0xfa, 0x40, 0x07, 0x06, 0x00, 0x00,
}

func (m *LockDBLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LockedCount != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.LockedCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LockKey) > 0 {
		i -= len(m.LockKey)
		copy(dAtA[i:], m.LockKey)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockDBLockCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBLockCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBLockCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rcount != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Rcount))
		i--
		dAtA[i] = 0x50
	}
	if m.Count != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x48
	}
	if m.Expried != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Expried))
		i--
		dAtA[i] = 0x40
	}
	if m.ExpriedFlag != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ExpriedFlag))
		i--
		dAtA[i] = 0x38
	}
	if m.Timeout != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x30
	}
	if m.TimeoutFlag != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.TimeoutFlag))
		i--
		dAtA[i] = 0x28
	}
	if len(m.LockKey) > 0 {
		i -= len(m.LockKey)
		copy(dAtA[i:], m.LockKey)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LockId) > 0 {
		i -= len(m.LockId)
		copy(dAtA[i:], m.LockId)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Flag != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintDb(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockDBLockLocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBLockLocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBLockLocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.IsLongTime {
		i--
		if m.IsLongTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsAof {
		i--
		if m.IsAof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsExpried {
		i--
		if m.IsExpried {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsTimeouted {
		i--
		if m.IsTimeouted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AofTime != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.AofTime))
		i--
		dAtA[i] = 0x30
	}
	if m.LockedCount != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.LockedCount))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpriedTime != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.ExpriedTime))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTime != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.TimeoutTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LockId) > 0 {
		i -= len(m.LockId)
		copy(dAtA[i:], m.LockId)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockDBLockWait) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBLockWait) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBLockWait) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsLongTime {
		i--
		if m.IsLongTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTime != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.TimeoutTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LockId) > 0 {
		i -= len(m.LockId)
		copy(dAtA[i:], m.LockId)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockDBListLockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBListLockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBListLockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DbId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.DbId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockDBListLockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBListLockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBListLockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockDBListLockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBListLockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBListLockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LockKey) > 0 {
		i -= len(m.LockKey)
		copy(dAtA[i:], m.LockKey)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.DbId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.DbId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockDBListLockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBListLockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBListLockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LockedCount != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.LockedCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LockKey) > 0 {
		i -= len(m.LockKey)
		copy(dAtA[i:], m.LockKey)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockDBListWaitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBListWaitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBListWaitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LockKey) > 0 {
		i -= len(m.LockKey)
		copy(dAtA[i:], m.LockKey)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.DbId != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.DbId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockDBListWaitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockDBListWaitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockDBListWaitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LockedCount != 0 {
		i = encodeVarintDb(dAtA, i, uint64(m.LockedCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LockKey) > 0 {
		i -= len(m.LockKey)
		copy(dAtA[i:], m.LockKey)
		i = encodeVarintDb(dAtA, i, uint64(len(m.LockKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDb(dAtA []byte, offset int, v uint64) int {
	offset -= sovDb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockDBLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LockKey)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.LockedCount != 0 {
		n += 1 + sovDb(uint64(m.LockedCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBLockCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovDb(uint64(m.Flag))
	}
	l = len(m.LockId)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	l = len(m.LockKey)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.TimeoutFlag != 0 {
		n += 1 + sovDb(uint64(m.TimeoutFlag))
	}
	if m.Timeout != 0 {
		n += 1 + sovDb(uint64(m.Timeout))
	}
	if m.ExpriedFlag != 0 {
		n += 1 + sovDb(uint64(m.ExpriedFlag))
	}
	if m.Expried != 0 {
		n += 1 + sovDb(uint64(m.Expried))
	}
	if m.Count != 0 {
		n += 1 + sovDb(uint64(m.Count))
	}
	if m.Rcount != 0 {
		n += 1 + sovDb(uint64(m.Rcount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBLockLocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LockId)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovDb(uint64(m.StartTime))
	}
	if m.TimeoutTime != 0 {
		n += 1 + sovDb(uint64(m.TimeoutTime))
	}
	if m.ExpriedTime != 0 {
		n += 1 + sovDb(uint64(m.ExpriedTime))
	}
	if m.LockedCount != 0 {
		n += 1 + sovDb(uint64(m.LockedCount))
	}
	if m.AofTime != 0 {
		n += 1 + sovDb(uint64(m.AofTime))
	}
	if m.IsTimeouted {
		n += 2
	}
	if m.IsExpried {
		n += 2
	}
	if m.IsAof {
		n += 2
	}
	if m.IsLongTime {
		n += 2
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBLockWait) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LockId)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovDb(uint64(m.StartTime))
	}
	if m.TimeoutTime != 0 {
		n += 1 + sovDb(uint64(m.TimeoutTime))
	}
	if m.IsLongTime {
		n += 2
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovDb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBListLockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DbId != 0 {
		n += 1 + sovDb(uint64(m.DbId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBListLockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovDb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBListLockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DbId != 0 {
		n += 1 + sovDb(uint64(m.DbId))
	}
	l = len(m.LockKey)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBListLockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LockKey)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.LockedCount != 0 {
		n += 1 + sovDb(uint64(m.LockedCount))
	}
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovDb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBListWaitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DbId != 0 {
		n += 1 + sovDb(uint64(m.DbId))
	}
	l = len(m.LockKey)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockDBListWaitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LockKey)
	if l > 0 {
		n += 1 + l + sovDb(uint64(l))
	}
	if m.LockedCount != 0 {
		n += 1 + sovDb(uint64(m.LockedCount))
	}
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovDb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDb(x uint64) (n int) {
	return sovDb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockDBLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockKey = append(m.LockKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LockKey == nil {
				m.LockKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCount", wireType)
			}
			m.LockedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBLockCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBLockCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBLockCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockId = append(m.LockId[:0], dAtA[iNdEx:postIndex]...)
			if m.LockId == nil {
				m.LockId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockKey = append(m.LockKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LockKey == nil {
				m.LockKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutFlag", wireType)
			}
			m.TimeoutFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpriedFlag", wireType)
			}
			m.ExpriedFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpriedFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expried", wireType)
			}
			m.Expried = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expried |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rcount", wireType)
			}
			m.Rcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rcount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBLockLocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBLockLocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBLockLocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockId = append(m.LockId[:0], dAtA[iNdEx:postIndex]...)
			if m.LockId == nil {
				m.LockId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTime", wireType)
			}
			m.TimeoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpriedTime", wireType)
			}
			m.ExpriedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpriedTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCount", wireType)
			}
			m.LockedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AofTime", wireType)
			}
			m.AofTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AofTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTimeouted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTimeouted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExpried", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExpried = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAof = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLongTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLongTime = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &LockDBLockCommand{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBLockWait) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBLockWait: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBLockWait: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockId = append(m.LockId[:0], dAtA[iNdEx:postIndex]...)
			if m.LockId == nil {
				m.LockId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTime", wireType)
			}
			m.TimeoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLongTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLongTime = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &LockDBLockCommand{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBListLockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBListLockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBListLockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBListLockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBListLockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBListLockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &LockDBLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBListLockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBListLockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBListLockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockKey = append(m.LockKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LockKey == nil {
				m.LockKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBListLockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBListLockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBListLockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockKey = append(m.LockKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LockKey == nil {
				m.LockKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCount", wireType)
			}
			m.LockedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &LockDBLockLocked{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBListWaitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBListWaitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBListWaitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockKey = append(m.LockKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LockKey == nil {
				m.LockKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockDBListWaitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockDBListWaitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockDBListWaitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockKey = append(m.LockKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LockKey == nil {
				m.LockKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCount", wireType)
			}
			m.LockedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &LockDBLockWait{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDb = fmt.Errorf("proto: unexpected end of group")
)
