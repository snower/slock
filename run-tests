#!/bin/bash

log_error() {
  echo "$*" 1>&2
}

run_govet() {
    GOVET_ERRORS=$(go vet "$*" 2>&1)
    if [ -n "$GOVET_ERRORS" ]
        then
            log_error "go vet failed for the following reasons:
            $GOVET_ERRORS
please run 'go vet $*' on your changes before committing."
        ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
        exit 1
    fi
}

run_gotest() {
    GOTEST_OUTPUTS=$(go test "$*" 2>&1)
    GOTEST_ERRORS=$(echo "$GOTEST_OUTPUTS" | grep "FAIL")
    if [ -n "$GOTEST_ERRORS" ]
        then
            log_error "go test failed for the following reasons:
            $GOTEST_OUTPUTS
please run 'go test $*' on your changes before committing."
        ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
        exit 1
    fi
}

echo "Run go vet"
run_govet "github.com/snower/slock/protocol"
run_govet "github.com/snower/slock/server"
run_govet "github.com/snower/slock/client"

echo "Run go test"
run_gotest "github.com/snower/slock/protocol"
run_gotest "github.com/snower/slock/server"

export PATH=$(pwd):$PATH

DATA_DIR="/tmp/$(date '+%Y%m%d%H%M%S')/"
mkdir $DATA_DIR
LOG_FILENAME="${DATA_DIR}slock.log"
slock --data_dir="$DATA_DIR" > $LOG_FILENAME 2>&1 &

SLOCK_PS=$(ps aux | grep slock | grep -v grep)
if [ -z "$SLOCK_PS" ]
    then
        SLOCK_ERRORS=$(slock 2>&1)
        log_error "slock start failed for the following reasons:
                   $SLOCK_ERRORS
please run 'slock' on your changes before committing."
    exit 1
fi

run_gotest "github.com/snower/slock/client"

echo "Run Benchmark"
echo

BENCH_CMD="go run tools/benchmark/main.go --client=4 --conc=16 --count=200000"
BENCH_OUTPUTS=$(which timeout > /dev/null 2>&1 && timeout 120 $BENCH_CMD 2>&1 || $BENCH_CMD 2>&1)
BENCH_SUCCEDS=$(echo "$BENCH_OUTPUTS" | grep "Succed")
if [ -z "$BENCH_SUCCEDS" ]
    then
        log_error "slock benchmark multi key single lock failed for the following reasons:
                   $BENCH_OUTPUTS
please run 'go run benchmarks/benchmark/benchmark.go' on your changes before committing."

    ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    ps -ef | grep benchmark | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    exit 1
fi

echo "Benchmark Multi Key Single Lock Info:
$BENCH_OUTPUTS
"

BENCH_CMD="go run tools/benchmark/main.go --key=1 --client=4 --conc=16 --count=80000"
BENCH_OUTPUTS=$(which timeout > /dev/null 2>&1 && timeout 120 $BENCH_CMD 2>&1 || $BENCH_CMD 2>&1)
BENCH_SUCCEDS=$(echo "$BENCH_OUTPUTS" | grep "Succed")
if [ -z "$BENCH_SUCCEDS" ]
    then
        log_error "slock benchmark single key multi lock failed for the following reasons:
                   $BENCH_OUTPUTS
please run 'go run benchmarks/benchmark/benchmark.go' on your changes before committing."

    ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    ps -ef | grep benchmark | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    exit 1
fi

echo "Benchmark Single Key Multi Lock Info:
$BENCH_OUTPUTS
"

BENCH_CMD="go run tools/benchmark/main.go --client=4 --conc=16 --count=20000 --timeout_flag=4096"
BENCH_OUTPUTS=$(which timeout > /dev/null 2>&1 && timeout 120 $BENCH_CMD 2>&1 || $BENCH_CMD 2>&1)
BENCH_SUCCEDS=$(echo "$BENCH_OUTPUTS" | grep "Succed")
if [ -z "$BENCH_SUCCEDS" ]
    then
        log_error "slock benchmark multi key multi lock require ack failed for the following reasons:
                   $BENCH_OUTPUTS
please run 'go run benchmarks/benchmark/benchmark.go' on your changes before committing."

    ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    ps -ef | grep benchmark | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    exit 1
fi

echo "Benchmark Multi Key Multi Lock Require Ack Info:
$BENCH_OUTPUTS
"

BENCH_CMD="go run tools/benchmark/main.go --client=4 --conc=16 --count=40000 --data_length=4096"
BENCH_OUTPUTS=$(which timeout > /dev/null 2>&1 && timeout 120 $BENCH_CMD 2>&1 || $BENCH_CMD 2>&1)
BENCH_SUCCEDS=$(echo "$BENCH_OUTPUTS" | grep "Succed")
if [ -z "$BENCH_SUCCEDS" ]
    then
        log_error "slock benchmark multi key multi lock with data failed for the following reasons:
                   $BENCH_OUTPUTS
please run 'go run benchmarks/benchmark/benchmark.go' on your changes before committing."

    ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    ps -ef | grep benchmark | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    exit 1
fi

echo "Benchmark Multi Key Multi Lock With Data Info:
$BENCH_OUTPUTS
"

BENCH_CMD="go run tools/benchmark/main.go --client=4 --conc=16 --count=10000  --timeout_flag=4096 --data_length=4096"
BENCH_OUTPUTS=$(which timeout > /dev/null 2>&1 && timeout 120 $BENCH_CMD 2>&1 || $BENCH_CMD 2>&1)
BENCH_SUCCEDS=$(echo "$BENCH_OUTPUTS" | grep "Succed")
if [ -z "$BENCH_SUCCEDS" ]
    then
        log_error "slock benchmark multi key multi lock require ack and with data failed for the following reasons:
                   $BENCH_OUTPUTS
please run 'go run benchmarks/benchmark/benchmark.go' on your changes before committing."

    ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    ps -ef | grep benchmark | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    exit 1
fi

echo "Benchmark Multi Key Multi Require Ack And Lock With Data Info:
$BENCH_OUTPUTS
"

BENCH_CMD="go run tools/benchmark/main.go --mode=stream --client=4 --conc=16 --count=500000"
BENCH_OUTPUTS=$(which timeout > /dev/null 2>&1 && timeout 120 $BENCH_CMD 2>&1 || $BENCH_CMD 2>&1)
BENCH_SUCCEDS=$(echo "$BENCH_OUTPUTS" | grep "Succed")
if [ -z "$BENCH_SUCCEDS" ]
    then
        log_error "slock benchmark parallel lock failed for the following reasons:
                   $BENCH_OUTPUTS
please run 'go run benchmarks/benchmark/benchmark.go' on your changes before committing."

    ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    ps -ef | grep benchmark | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
    exit 1
fi

echo "Benchmark Parallel Lock Info:
$BENCH_OUTPUTS
"

sleep 3
SLOCK_INFOS=$(slock info 2>&1)
echo "Slock Info:
$SLOCK_INFOS
"

ps aux | grep slock | grep -v grep
echo

ps -ef | grep slock | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1
ps -ef | grep benchmark | grep -v grep | awk '{print $2}' | xargs kill -HUP > /dev/null 2>&1

sleep 2

echo "Slock Log:"
cat $LOG_FILENAME | grep -v Protocol | grep -v Connection
echo

exit 0